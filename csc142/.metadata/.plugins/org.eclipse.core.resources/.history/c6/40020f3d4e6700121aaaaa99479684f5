import uwcse.graphics.*; // access the graphics utilities in the uw library
import java.awt.Color; // access the Color class

/**
 * <p>
 * Create a tree with ornaments in a graphics window
 * </p>
 * 
 * @author your name here
 */

public class Tree {

	// Instance fields
	// The graphics window this tree belongs to
	private GWindow window;
	// The location of this tree
	// (precisely (as done in the draw method), (x,y) is
	// the upper left corner of the tree trunk)
	private int x;
	private int y;
	// The scale used to draw this tree
	private double scale;

	// define oval1
	private Oval oval1;

	// define oval2
	private Oval oval2;

	// define oval3
	private Oval oval3;

	// define color

	Color color1, color2, color3;

	//define tree.
	private Rectangle trunk;
	private Triangle foliage, foliage1, foliage2;

	private boolean bool, down, right;

	private int max = 20;

	/**
	 * Create a tree
	 * 
	 * @param x
	 *            the x coordinate of the tree location (upper left corner of
	 *            the tree trunk)
	 * @param y
	 *            the y coordinate of the tree location
	 * @param window
	 *            the graphics window this Tree belongs to
	 * @param scale
	 *            the scale of the drawing (all default dimensions are
	 *            multiplied by scale)
	 */
	public Tree(int x, int y, double scale, GWindow window) {
		// Initialize the instance fields (the use of this is required
		// since the instance fields have the same name as the
		// parameters of the constructor)
		this.window = window;
		this.scale = scale;
		this.x = x;
		this.y = y;
		// the details of the drawing are in written in the private method
		// draw()
		this.draw();
	}

	/**
	 * draw a pine tree
	 */
	private void draw() {
		// trunk of the tree: a brown rectangle
		// (int) converts to an int 20*this scale (etc...), which is a double
		// For instance, (int)23.8 is 23
		// This is necessary since the Rectangle constructor takes integers
		drawTree();

		// Improve the drawing of the foliage and add the ornaments...
		drawOval();
	}
	
	//redraw the tree and flashornaments
	//control the tree inside the window
	public void flashOrnaments() {
		erase();
		if (down) {
			y += (int) (Math.random() * max);
			if (y > window.getWindowHeight()) {
				down = false;
			}
		} else {
			y -= (int) (Math.random() * max);
			if (y < 0) {
				down = true;
			}
		}
		if (right) {
			x += (int) (Math.random() * max);
			if (x > window.getWindowWidth()) {
				right = false;
			}
		} else {
			x -= (int) (Math.random() * max);
			if (x < 0) {
				right = true;
			}
		}

		drawTree();
		drawOval();
	}

		//erase the tree and oval
	private void erase() {
		this.window.remove(trunk);
		this.window.remove(foliage2);
		this.window.remove(foliage1);
		this.window.remove(foliage);

		this.window.remove(oval1);
		this.window.remove(oval2);
		this.window.remove(oval3);
	
	}

	//draw the oval
	private void drawOval() {

		int r = (int) (Math.random() * 255), b = (int) (Math.random() * 255), g = (int) (Math
				.random() * 255);
		//set up random color
		color1 = new Color(r, g, b);
		color2 = new Color(g, b, r);
		color3 = new Color(b, r, g);
		oval1 = new Oval(this.x, this.y + (int) (10 * this.scale),
				(int) this.scale * 10, (int) this.scale * 10, color1, true);
		oval2 = new Oval(this.x, this.y - (int) (30 * this.scale),
				(int) this.scale * 10, (int) this.scale * 10, color2, true);
		oval3 = new Oval(this.x + (int) (36 * this.scale), this.y
				- (int) (5 * this.scale), (int) this.scale * 10,
				(int) this.scale * 10, color3, true);

		this.window.add(oval1);
		this.window.add(oval2);
		this.window.add(oval3);

	}
	//draw tree
	private void drawTree() {
		trunk = new Rectangle(this.x, this.y, (int) (20 * this.scale),
				(int) (60 * this.scale), Color.black, true);
		// Foliage (improve the drawing!)
		// a green triangle
		foliage = new Triangle(this.x - (int) (30 * this.scale), this.y
				+ (int) (30 * this.scale), this.x + (int) (10 * this.scale),
				this.y - (int) (10 * this.scale), this.x
						+ (int) (50 * this.scale), this.y
						+ (int) (30 * this.scale), Color.green, true);
		foliage1 = new Triangle(this.x - (int) (25 * this.scale), this.y
				+ (int) (15 * this.scale), this.x + (int) (10 * this.scale),
				this.y - (int) (20 * this.scale), this.x
						+ (int) (45 * this.scale), this.y
						+ (int) (15 * this.scale), Color.green, true);

		foliage2 = new Triangle(this.x - (int) (20 * this.scale), this.y
				- (int) (5 * this.scale), this.x + (int) (10 * this.scale),
				this.y - (int) (40 * this.scale), this.x
						+ (int) (40 * this.scale), this.y
						- (int) (5 * this.scale), Color.green, true);

		this.window.add(trunk);
		this.window.add(foliage2);
		this.window.add(foliage1);
		this.window.add(foliage);
	}

}